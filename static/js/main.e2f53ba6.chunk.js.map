{"version":3,"sources":["store/actions/actionTypes.js","store/reducers/reducer.js","store/store.js","components/Header.jsx","store/actions/index.js","containers/UserInput.jsx","components/TableRow.jsx","components/Spinner.jsx","components/Message.jsx","containers/Table.jsx","containers/Pagination.jsx","App.jsx","index.js"],"names":["NEXT_PAGE","PREVIOUS_PAGE","GET_API_DATA_START","GET_API_DATA_READY","GET_API_DATA_ERROR","SEARCH_QUERY_SUBMIT","initialState","shows","isLoading","currentPage","tableCaption","isLastPage","error","search","reducer","state","arguments","length","undefined","action","type","Object","objectSpread","data","countryList","lastPageNumber","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","header","react_default","a","createElement","traktApi","baseUrl","headers","Content-type","trakt-api-key","trakt-api-version","fetchData","dispatch","queryUrl","years","queryString","country","fetch","then","response","status","pageCount","get","thisPage","json","console","log","catch","getShowsData","Promise","all","map","show","ids","imdb","tv_results","poster_path","link","title","poster","year","getImagesData","result","payload","caption","onError","UserInput","submitHandler","event","preventDefault","_this","refs","searchString","query","value","searchYear","searchCountry","props","getState","this","key","code","name","id","onSubmit","htmlFor","ref","placeholder","min","max","Date","getFullYear","defaultValue","Component","connect","TableRow","index","width","src","alt","toUpperCase","Spinner","Message","message","Table","components_Spinner","components_Message","rows","i","components_TableRow","Pagination","nextPage","previousPage","onClick","App","es","Header","containers_UserInput","containers_Table","containers_Pagination","ReactDOM","render","src_App","document","getElementById"],"mappings":"sQAAaA,EAAY,YACZC,EAAgB,gBAChBC,EAAqB,qBACrBC,EAAqB,qBACrBC,EAAqB,qBACrBC,EAAsB,sBCG7BC,EAAe,CACjBC,MAAO,GACPC,WAAW,EACXC,YAAa,EACbC,aAAc,GACdC,YAAY,EACZC,OAAO,EACPC,OAAQ,MAiDGC,MA9Cf,WAA+C,IAA9BC,EAA8BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBV,EAAca,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC3C,OAAOC,EAAOC,MACV,KAAKlB,EACD,OAAOmB,OAAAC,EAAA,EAAAD,CAAA,GACAN,EADP,CAEIP,WAAW,IAEnB,KAAKL,EACD,OAAOkB,OAAAC,EAAA,EAAAD,CAAA,GACAN,EADP,CAEIR,MAAOY,EAAOI,KAAKhB,MACnBiB,YAAaL,EAAOI,KAAKC,YACzBd,aAAcS,EAAOI,KAAKb,aAC1BC,WAAYQ,EAAOI,KAAKZ,WACxBc,eAAgBN,EAAOI,KAAKE,eAC5BjB,WAAW,IAEnB,KAAKJ,EACD,OAAOiB,OAAAC,EAAA,EAAAD,CAAA,GACAN,EADP,CAEIH,MAAOO,EAAOP,MACdJ,WAAW,IAEnB,KAAKH,EACD,OAAOgB,OAAAC,EAAA,EAAAD,CAAA,GACAN,EADP,CAEIN,YAAa,EACbI,OAAQM,EAAON,SAEvB,KAAKb,EACD,OAAOqB,OAAAC,EAAA,EAAAD,CAAA,GACAN,EADP,CAEIN,YAAaM,EAAMN,YAAc,IAGzC,KAAKR,EACD,OAAOoB,OAAAC,EAAA,EAAAD,CAAA,GACAN,EADP,CAEIN,YAAaM,EAAMN,YAAc,IAGzC,QACI,OAAOM,ICvDbW,EAAmBC,OAAOC,sCAAwCC,IAMzDC,EAJDC,YACVjB,EACAY,EAAiBM,YAAgBC,OCFtBC,MALf,WACI,OAAOC,EAAAC,EAAAC,cAAA,8CCELC,EAAW,CACbC,QAAU,wBACVC,QAAS,CACLC,eAAgB,mBAChBC,gBAAiB,mEACjBC,oBAAqB,IAK7B,SAASC,EAAU7B,GACf,OAAO,SAAA8B,GACHA,EAAS,CAACzB,KAAMlB,IAmDxB,SAAsBa,GAAO,IAIrBU,EAHIhB,EAAwBM,EAAxBN,YAAaI,EAAWE,EAAXF,OACjBiC,EAAW,GACXnC,GAAa,EAKbmC,EAHAjC,EAGWyB,EAASC,QAAU,kCAChB9B,EAAc,UAAYI,EAAOkC,MACjC,uBAAyBlC,EAAOmC,YAChC,cAAgBnC,EAAOoC,QAAU,YALpCX,EAASC,QAAU,qCAAuC9B,EAQzE,OAAOyC,MAAMJ,EAAU,CACnBN,QAASF,EAASE,UACnBW,KAAK,SAAAC,GACJ,GAAuB,MAApBA,EAASC,OAAZ,CAKA,IAAMC,EAAY7B,EAAiB2B,EAASZ,QAAQe,IAAI,2BAClDC,EAAWJ,EAASZ,QAAQe,IAAI,qBAEtC,OADA5C,EAAc2C,IAAcE,EACrBJ,EAASK,OAPZC,QAAQC,IAAI,gDACRP,EAASC,UAOlBF,KAAK,SAAA5B,GAEJ,OADAmC,QAAQC,IAAIpC,GACL,CACHhB,MAAOgB,EACPZ,WAAYA,EACZc,oBAGPmC,MAAM,SAAAhD,GACH,OAAOA,IApFOiD,CAAa9C,GACrBoC,KAAK,SAAA5B,GACPuC,QAAQC,IAAIxC,EAAKhB,MAAMyD,IAAI,SAAAC,GACvB,OAsFhB,SAAuBA,GACnB,IACMnB,EAAW,qCAAuCmB,EAAKA,KAAKC,IAAIC,KADvD,oEAGf,OAAOjB,MAAMJ,GACRK,KAAK,SAAAC,GACF,GAAuB,MAApBA,EAASC,OAKZ,OAAOD,EAASK,OAJZC,QAAQC,IAAI,gDACRP,EAASC,UAKpBF,KAAK,SAAA5B,GACF,GAA8B,IAA3BA,EAAK6C,WAAWnD,QAAgBM,EAAK6C,WAAW,GAAGC,YAAa,CAC/D,IAAMC,EAAO,kCAAoC/C,EAAK6C,WAAW,GAAGC,YACpE,MAAO,CACHE,MAAON,EAAKA,KAAKM,MACjBC,OAAQF,EACRG,KAAMR,EAAKA,KAAKQ,KAChBxB,QAASgB,EAAKA,KAAKhB,SAG3B,MAAO,CACHsB,MAAON,EAAKA,KAAKM,MACjBC,OAAQ,GACRC,KAAMR,EAAKA,KAAKQ,KAChBxB,QAAS,MAGhBW,MAAM,SAAAhD,GACH8C,QAAQC,IAAI,mBAAoB/C,KArHrB8D,CAAcT,MACrBd,KAAK,SAAAwB,GACDzB,MAAMZ,EAASC,QAAU,kBAAmB,CACxCC,QAASF,EAASE,UACnBW,KAAK,SAAAC,GAAQ,OAAIA,EAASK,SAC5BN,KAAK,SAAA3B,GACF,IAmBLoD,EAnBWC,EAAU9D,EAAMF,QACfE,EAAMF,OAAOmC,YACd,WAAajC,EAAMF,OAAOmC,YAAc,IACxC,WACNH,GAeL+B,EAfwB,CACfrE,MAAOoE,EACPnD,YAAaA,EACbd,aAAcmE,EACdlE,WAAYY,EAAKZ,WACjBc,eAAgBF,EAAKE,gBAWtC,CACHL,KAAMjB,EACNoB,KAAM,CACFhB,MAAOqE,EAAQrE,MACfiB,YAAaoD,EAAQpD,YACrBd,aAAckE,EAAQlE,aACtBC,WAAYiE,EAAQjE,WACpBc,eAAgBmD,EAAQnD,yBAdzBmC,MAAM,SAAAhD,GAAK,OAAIiC,EAmB1B,SAAiBjC,GACb,MAAO,CACHQ,KAAMhB,EACNQ,MAAOA,GAtBoBkE,CAAQlE,WClCrCmE,6MACFC,cAAgB,SAACC,GACbA,EAAMC,iBACNxB,QAAQC,IAAIwB,EAAKC,KAAKC,cAEtB,IAAMC,EAAQ,CACVtC,YAAamC,EAAKC,KAAKC,aAAaE,MACpCxC,MAAOoC,EAAKC,KAAKI,WAAWD,MAC5BtC,QAASkC,EAAKC,KAAKK,cAAcF,OAGrCJ,EAAKO,MAAM7C,SAAS,CAAEzB,KAAMf,EAAqBQ,OAAQyE,IACzDH,EAAKO,MAAM7C,SAASD,EAAUd,EAAM6D,sFAIpC,GAAGC,KAAKF,MAAMlF,WAAaoF,KAAKF,MAAM9E,MAClC,OAAO,KAGX,IAAMY,EAAcoE,KAAKF,MAAMlE,YAAYwC,IAAI,SAACf,EAAS4C,GACrD,OAAO1D,EAAAC,EAAAC,cAAA,UAAQwD,IAAKA,EAAKN,MAAOtC,EAAQ6C,MAAO7C,EAAQ8C,QAG3D,OACI5D,EAAAC,EAAAC,cAAA,OAAK2D,GAAG,aACJ7D,EAAAC,EAAAC,cAAA,QAAM4D,SAAUL,KAAKZ,eACjB7C,EAAAC,EAAAC,cAAA,SAAO6D,QAAQ,gBAAf,UACW/D,EAAAC,EAAAC,cAAA,SACHjB,KAAK,OACL+E,IAAI,eACJJ,KAAK,eACLK,YAAY,qBAGpBjE,EAAAC,EAAAC,cAAA,SAAO6D,QAAQ,cAAf,SACU/D,EAAAC,EAAAC,cAAA,SAAOjB,KAAK,SACdiF,IAAI,OACJC,KAAK,IAAIC,MAAOC,cAChBL,IAAI,aACJJ,KAAK,gBAGb5D,EAAAC,EAAAC,cAAA,SAAO6D,QAAQ,iBAAf,YACa/D,EAAAC,EAAAC,cAAA,UAAQ8D,IAAI,gBAAgBJ,KAAK,iBACtC5D,EAAAC,EAAAC,cAAA,UAAQoE,cAAY,IACnBjF,IAGTW,EAAAC,EAAAC,cAAA,UAAQjB,KAAK,UAAb,sBAjDIsF,aAgETC,kBARf,SAAyB5F,GACrB,MAAO,CACHS,YAAaT,EAAMS,YACnBhB,UAAWO,EAAMP,UACjBI,MAAOG,EAAMH,QAIN+F,CAAyB5B,GClDzB6B,EAnBE,SAAClB,GAEd,OADAhC,QAAQC,IAAI+B,EAAMmB,OAEV1E,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIyE,MAAM,MAAMpB,EAAMmB,OACtB1E,EAAAC,EAAAC,cAAA,MAAIyE,MAAM,SACN3E,EAAAC,EAAAC,cAAA,OACI0E,IAAKrB,EAAMzB,KAAKO,OAChBwC,IAAK,IAAMtB,EAAMzB,KAAKM,MAAQ,YAC9BuC,MAAM,WAGd3E,EAAAC,EAAAC,cAAA,UAAKqD,EAAMzB,KAAKM,OAChBpC,EAAAC,EAAAC,cAAA,MAAIyE,MAAM,OAAOpB,EAAMzB,KAAKQ,MAC5BtC,EAAAC,EAAAC,cAAA,MAAIyE,MAAM,OAAOpB,EAAMzB,KAAKhB,QAAUyC,EAAMzB,KAAKhB,QAAQgE,cAAgB,SCL1EC,EATC,SAACxB,GACb,OACIvD,EAAAC,EAAAC,cAAA,OAAK2D,GAAG,cACJ7D,EAAAC,EAAAC,cAAA,OAAK0E,IAAI,SAASC,IAAI,eACtB7E,EAAAC,EAAAC,cAAA,0BCIG8E,EARC,SAACzB,GACb,OACIvD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKqD,EAAM0B,WCIjBC,8LAEEzB,KAAKF,MAAM7C,SAASD,EAAUvB,OAAAC,EAAA,EAAAD,CAAA,CAC1BZ,YAAamF,KAAKF,MAAMjF,aACrBmF,KAAKF,MAAM7E,2CAKlB,GAAG+E,KAAKF,MAAMlF,UACV,OAAO2B,EAAAC,EAAAC,cAACiF,EAAD,MAEP,GAAG1B,KAAKF,MAAM9E,MACV,OAAQuB,EAAAC,EAAAC,cAACkF,EAAD,CAASH,QAAS,4BAE9B,GAA+B,IAA5BxB,KAAKF,MAAMnF,MAAMU,OAChB,OAAOkB,EAAAC,EAAAC,cAACkF,EAAD,CAASH,QAAS,mBAE7B,IAAII,EAAO5B,KAAKF,MAAMnF,MAAMyD,IAAI,SAACC,EAAMwD,GACnC,OAAOtF,EAAAC,EAAAC,cAACqF,EAAD,CAAU7B,IAAK4B,EAAGZ,MAAOY,EAAI,EAAGxD,KAAMA,MAGjD,OACI9B,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,eACKuD,KAAKF,MAAMhF,cAEhByB,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,uBAGRF,EAAAC,EAAAC,cAAA,aACKmF,WArCLd,aAwDLC,kBAXf,SAAyB5F,GACrB,MAAO,CACHR,MAAOQ,EAAMR,MACbM,OAAQE,EAAMF,OACdJ,YAAaM,EAAMN,YACnBD,UAAWO,EAAMP,UACjBE,aAAcK,EAAML,aACpBE,MAAOG,EAAMH,QAIN+F,CAAyBU,GC1DlCM,6MACFC,SAAW,WACJzC,EAAKO,MAAM/E,aAGdwE,EAAKO,MAAM7C,SAAS,CAAEzB,KAAMpB,IAC5BmF,EAAKO,MAAM7C,SAASD,EAAUd,EAAM6D,iBAGxCkC,aAAe,WACmB,IAA3B1C,EAAKO,MAAMjF,cAGd0E,EAAKO,MAAM7C,SAAS,CAAEzB,KAAMnB,IAC5BkF,EAAKO,MAAM7C,SAASD,EAAUd,EAAM6D,uFAIpC,OAA+B,IAA5BC,KAAKF,MAAMnF,MAAMU,QAAgB2E,KAAKF,MAAMlF,UACpC,KAGP2B,EAAAC,EAAAC,cAAA,OAAK2D,GAAG,cACJ7D,EAAAC,EAAAC,cAAA,OAAK2D,GAAG,QACJ7D,EAAAC,EAAAC,cAAA,UAAQyF,QAASlC,KAAKiC,cAAtB,SAEJ1F,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,iBAASuD,KAAKF,MAAMjF,YAApB,OAAqCmF,KAAKF,MAAMjE,iBAEpDU,EAAAC,EAAAC,cAAA,OAAK2D,GAAG,QACJ7D,EAAAC,EAAAC,cAAA,UAAQyF,QAASlC,KAAKgC,UAAtB,iBA9BKlB,aA+CVC,kBAVf,SAAyB5F,GACrB,MAAO,CACHR,MAAOQ,EAAMR,MACbE,YAAaM,EAAMN,YACnBE,WAAYI,EAAMJ,WAClBc,eAAgBV,EAAMU,eACtBjB,UAAWO,EAAMP,YAIVmG,CAAyBgB,GC7BzBI,mLAXX,OACE5F,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,CAAUlG,MAAOA,GACfK,EAAAC,EAAAC,cAAC4F,EAAD,MACA9F,EAAAC,EAAAC,cAAC6F,EAAD,MACA/F,EAAAC,EAAAC,cAAC8F,EAAD,MACAhG,EAAAC,EAAAC,cAAC+F,EAAD,cAPU1B,aCNlB2B,IAASC,OAAOnG,EAAAC,EAAAC,cAACkG,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.e2f53ba6.chunk.js","sourcesContent":["export const NEXT_PAGE = 'NEXT_PAGE';\nexport const PREVIOUS_PAGE = 'PREVIOUS_PAGE';\nexport const GET_API_DATA_START = 'GET_API_DATA_START';\nexport const GET_API_DATA_READY = 'GET_API_DATA_READY';\nexport const GET_API_DATA_ERROR = 'GET_API_DATA_ERROR';\nexport const SEARCH_QUERY_SUBMIT = 'SEARCH_QUERY_SUBMIT';","import {\n    GET_API_DATA_START,\n    GET_API_DATA_READY,\n    GET_API_DATA_ERROR,\n    SEARCH_QUERY_SUBMIT,\n    NEXT_PAGE, PREVIOUS_PAGE\n} from '../actions/actionTypes';\n\nconst initialState = {\n    shows: [],\n    isLoading: true,\n    currentPage: 1,\n    tableCaption: '',\n    isLastPage: false,\n    error: false,\n    search: null\n};\n\nfunction reducer(state = initialState, action) {\n    switch(action.type) {\n        case GET_API_DATA_START:\n            return {\n                ...state,\n                isLoading: true\n            }\n        case GET_API_DATA_READY:\n            return {\n                ...state,\n                shows: action.data.shows,\n                countryList: action.data.countryList,\n                tableCaption: action.data.tableCaption,\n                isLastPage: action.data.isLastPage,\n                lastPageNumber: action.data.lastPageNumber,\n                isLoading: false,\n            }\n        case GET_API_DATA_ERROR:\n            return {\n                ...state,\n                error: action.error,\n                isLoading: false\n            }\n        case SEARCH_QUERY_SUBMIT:\n            return {\n                ...state,\n                currentPage: 1,\n                search: action.search\n            }\n        case NEXT_PAGE:\n            return {\n                ...state,\n                currentPage: state.currentPage + 1\n            };\n\n        case PREVIOUS_PAGE:\n            return {\n                ...state,\n                currentPage: state.currentPage - 1\n            };\n            \n        default:\n            return state;\n    }\n}\n\nexport default reducer;\n\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './reducers/reducer';\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n    reducer,\n    composeEnhancers(applyMiddleware(thunk)));\n\nexport default store;","import React from 'react';\n\nfunction header() {\n    return <h1>Look up your favorite TV shows!</h1>;\n    \n}\n\nexport default header;","import { GET_API_DATA_START, GET_API_DATA_READY, GET_API_DATA_ERROR } from \"./actionTypes\";\n\n// action functions\n\n// Trakt API info in variables\nconst traktApi = {\n    baseUrl:  'https://api.trakt.tv/',\n    headers: {\n        'Content-type': 'application/json',\n        'trakt-api-key': '38760291a0e06beeee9e5a43a2217cea8108ee0dc6d9a2fbcf784ac9aec2bdc3',\n        'trakt-api-version': 2\n    }\n}\n\n// dispatch creator function with redux thunk calls before monting the app component\nfunction fetchData(state) {\n    return dispatch => {\n        dispatch({type: GET_API_DATA_START});\n\n        const shows = getShowsData(state);\n        shows.then(data => {\n            Promise.all(data.shows.map(show => {\n                return getImagesData(show);\n            })).then(result => {\n                    fetch(traktApi.baseUrl + 'countries/shows', {\n                        headers: traktApi.headers\n                    }).then(response => response.json())\n                    .then(countryList => {\n                        const caption = state.search\n                            && state.search.queryString\n                            ? \"Search '\" + state.search.queryString + \"'\"\n                            : \"Trending\";\n                        dispatch(onSuccess({\n                            shows: result,\n                            countryList: countryList,\n                            tableCaption: caption,\n                            isLastPage: data.isLastPage,\n                            lastPageNumber: data.lastPageNumber\n                        }));\n                    });\n                });\n        }).catch(error => dispatch(onError(error)));\n\n        \n    }\n}\n\nfunction onSuccess(payload) {\n    return {\n        type: GET_API_DATA_READY,\n        data: {\n            shows: payload.shows,\n            countryList: payload.countryList,\n            tableCaption: payload.tableCaption,\n            isLastPage: payload.isLastPage,\n            lastPageNumber: payload.lastPageNumber\n        }\n    };\n}\n\nfunction onError(error) {\n    return {\n        type: GET_API_DATA_ERROR,\n        error: error\n    };\n}\n\n// Used to get the shows data from trakt API\nfunction getShowsData(state) {\n    const { currentPage, search } = state;\n    let queryUrl = '';\n    let isLastPage = false;\n    let lastPageNumber;\n    if(!search) {\n        queryUrl = traktApi.baseUrl + 'shows/trending?extended=full&page=' + currentPage\n    } else {\n        queryUrl = traktApi.baseUrl + 'search/show?extended=full&page='\n                    + currentPage + '&years=' + search.years\n                    + '&fields=title&query=' + search.queryString\n                    + '&countries=' + search.country + '&limit=10';\n    }\n\n    return fetch(queryUrl, {\n        headers: traktApi.headers\n    }).then(response => {\n        if(response.status !== 200) {\n            console.log('Looks like there was a problem. Status Code: ' +\n                response.status);\n            return;\n        }\n        const pageCount = lastPageNumber = response.headers.get(\"X-Pagination-Page-Count\");\n        const thisPage = response.headers.get(\"X-Pagination-Page\");\n        isLastPage = (pageCount === thisPage);\n        return response.json();\n    }).then(data => {\n        console.log(data);\n        return {\n            shows: data,\n            isLastPage: isLastPage,\n            lastPageNumber\n        }\n    })\n    .catch(error => {\n        return error;\n    });\n}\n\n// Used to fetch image links for posters\nfunction getImagesData(show) {\n    const params = '?api_key=bcdbbabd42939d9fe3b0800ec18a70cf&external_source=imdb_id';\n    const queryUrl = 'https://api.themoviedb.org/3/find/' + show.show.ids.imdb + params;\n    \n    return fetch(queryUrl)\n        .then(response => {\n            if(response.status !== 200) {\n                console.log('Looks like there was a problem. Status Code: ' +\n                    response.status);\n                return;\n            }\n            return response.json();\n        })\n        .then(data => {\n            if(data.tv_results.length !== 0 && data.tv_results[0].poster_path) {\n                const link = 'https://image.tmdb.org/t/p/w200' + data.tv_results[0].poster_path;\n                return {\n                    title: show.show.title,\n                    poster: link,\n                    year: show.show.year,\n                    country: show.show.country\n                };\n            }\n            return {\n                title: show.show.title,\n                poster: \"\",\n                year: show.show.year,\n                country: \"\"\n            };\n        })\n        .catch(error  => {\n            console.log('Fetch Error : -S', error);\n        });\n}\n\nexport { fetchData };","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchData } from '../store/actions/index';\nimport store from '../store/store';\nimport { SEARCH_QUERY_SUBMIT } from '../store/actions/actionTypes';\n\n\nclass UserInput extends Component {\n    submitHandler = (event) => {\n        event.preventDefault();\n        console.log(this.refs.searchString);\n\n        const query = {\n            queryString: this.refs.searchString.value,\n            years: this.refs.searchYear.value,\n            country: this.refs.searchCountry.value\n        }\n\n        this.props.dispatch({ type: SEARCH_QUERY_SUBMIT, search: query });\n        this.props.dispatch(fetchData(store.getState()));\n    }\n\n    render() {\n        if(this.props.isLoading || this.props.error) {\n            return null;\n        }\n\n        const countryList = this.props.countryList.map((country, key) => {\n            return <option key={key} value={country.code}>{country.name}</option>\n        });\n\n        return (\n            <div id=\"userInput\">\n                <form onSubmit={this.submitHandler}>\n                    <label htmlFor=\"searchString\">\n                        Title: <input\n                            type=\"text\"\n                            ref=\"searchString\"\n                            name=\"searchString\"\n                            placeholder=\"Search shows...\"\n                        />\n                    </label>\n                    <label htmlFor=\"searchYear\">\n                        Year: <input type=\"number\"\n                            min=\"1950\"\n                            max={new Date().getFullYear()}\n                            ref=\"searchYear\"\n                            name=\"searchYear\"\n                        />\n                    </label>\n                    <label htmlFor=\"searchCountry\">\n                        Country: <select ref=\"searchCountry\" name=\"searchCountry\">\n                            <option defaultValue></option>\n                            {countryList}\n                        </select>\n                    </label>\n                    <button type=\"submit\">Search...</button>\n                </form>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        countryList: state.countryList,\n        isLoading: state.isLoading,\n        error: state.error\n    };\n}\n\nexport default connect(mapStateToProps)(UserInput);","import React from 'react'\n\nconst TableRow = (props) => {\n    console.log(props.index)\n    return (\n            <tr>\n                <th width=\"5%\">{props.index}</th>\n                <td width=\"100px\">\n                    <img\n                        src={props.show.poster}\n                        alt={'\"' + props.show.title + '\" poster.'}\n                        width='100px'\n                    />\n                </td>\n                <td>{props.show.title}</td>\n                <td width=\"10%\">{props.show.year}</td>\n                <td width=\"10%\">{props.show.country ? props.show.country.toUpperCase() : 'n/a'}</td>\n            </tr>\n    );\n}\n\nexport default TableRow;\n","import React from 'react'\n\nconst Spinner = (props) => {\n    return (\n        <div id=\"loadingSVG\">\n            <img src='91.svg' alt='...LOADING' />\n            <h2>loading...</h2>\n        </div>\n    );\n};\n\nexport default Spinner;\n","import React from 'react';\n\nconst Message = (props) => {\n    return (\n        <div>\n            <h1>{props.message}</h1>\n        </div>\n    );\n};\n\nexport default Message;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchData } from '../store/actions/index';\n\nimport TableRow from '../components/TableRow';\nimport Spinner from '../components/Spinner';\nimport Message from '../components/Message';\n\n\nclass Table extends Component {\n    componentDidMount() {\n        this.props.dispatch(fetchData({\n            currentPage: this.props.currentPage,\n            ...this.props.search\n        }));\n    }\n\n    render() {\n        if(this.props.isLoading) {\n            return <Spinner />\n        } else {\n            if(this.props.error)\n                return  <Message message={'SOMETHING BAD HAPPENED!'} />\n\n            if(this.props.shows.length === 0)\n                return <Message message={'NOTHING FOUND!'} />\n\n            let rows = this.props.shows.map((show, i) => {\n                return <TableRow key={i} index={i + 1} show={show} />\n            });\n\n            return (\n                <table>\n                    <caption>\n                        {this.props.tableCaption}\n                    </caption>\n                    <thead>\n                        <tr>\n                            <th>Number</th>\n                            <th>Poster</th>\n                            <th>Title</th>\n                            <th>Year</th>\n                            <th>Country</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {rows}\n                    </tbody>\n                </table>\n            );\n        }\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        shows: state.shows,\n        search: state.search,\n        currentPage: state.currentPage,\n        isLoading: state.isLoading,\n        tableCaption: state.tableCaption,\n        error: state.error\n    };\n}\n\nexport default connect(mapStateToProps)(Table);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchData } from '../store/actions/index';\nimport store from '../store/store';\nimport { NEXT_PAGE, PREVIOUS_PAGE } from '../store/actions/actionTypes';\n\n\nclass Pagination extends Component {\n    nextPage = () => {\n        if(this.props.isLastPage) {\n            return;\n        }\n        this.props.dispatch({ type: NEXT_PAGE });\n        this.props.dispatch(fetchData(store.getState()));\n    }\n\n    previousPage = () => {\n        if(this.props.currentPage === 1) {\n            return;\n        }\n        this.props.dispatch({ type: PREVIOUS_PAGE });\n        this.props.dispatch(fetchData(store.getState()));\n    }\n\n    render() {\n        if(this.props.shows.length === 0 || this.props.isLoading) {\n            return null;\n        }\n        return (\n            <div id=\"pagination\">\n                <div id=\"prev\">\n                    <button onClick={this.previousPage}>PREV</button>\n                </div>\n                <div>\n                    <p>page {this.props.currentPage} of {this.props.lastPageNumber}</p>\n                </div>\n                <div id=\"next\">\n                    <button onClick={this.nextPage}>NEXT</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        shows: state.shows,\n        currentPage: state.currentPage,\n        isLastPage: state.isLastPage,\n        lastPageNumber: state.lastPageNumber,\n        isLoading: state.isLoading\n    };\n}\n\nexport default connect(mapStateToProps)(Pagination);","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nimport './static/css/App.css';\n\nimport Header from './components/Header';\nimport UserInput from './containers/UserInput';\nimport Table from './containers/Table';\nimport Pagination from './containers/Pagination';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Header />\n        <UserInput />\n        <Table />\n        <Pagination />\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './static/css/App.css';\nimport App from './App.jsx';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// serviceWorker.unregister();\n"],"sourceRoot":""}