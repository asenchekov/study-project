{"version":3,"sources":["store.js","actions/index.js","components/Header.jsx","components/UserInput.jsx","components/Table.jsx","components/Pagination.jsx","App.jsx","index.js"],"names":["initialState","shows","isLoading","currentPage","tableCaption","isLastPage","error","search","store","createStore","state","arguments","length","undefined","action","type","Object","objectSpread","data","countryList","lastPageNumber","applyMiddleware","thunk","logger","traktApi","baseUrl","headers","Content-type","trakt-api-key","trakt-api-version","fetchData","dispatch","queryUrl","years","queryString","country","fetch","then","response","status","pageCount","get","thisPage","json","console","log","catch","getShowsData","Promise","all","map","show","ids","imdb","tv_results","poster_path","link","title","poster","year","origin_country","getImagesData","result","payload","onError","Header","react_default","a","createElement","UserInput","submitHandler","event","preventDefault","query","_this","refs","searchString","value","searchYear","searchCountry","props","getState","this","key","code","name","id","onSubmit","htmlFor","ref","placeholder","min","max","Date","getFullYear","defaultValue","Component","connect","Table","src","alt","rows","i","width","join","Pagination","nextPage","previousPage","onClick","App","es","components_Header","components_UserInput","components_Table","components_Pagination","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.1f3dd024.chunk.js","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\n\r\nfunction reducer(state = initialState, action) {\r\n    switch(action.type) {\r\n        case 'GET_API_DATA_START':\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            }\r\n        case 'GET_API_DATA_READY':\r\n            return {\r\n                ...state,\r\n                shows: action.data.shows,\r\n                countryList: action.data.countryList,\r\n                tableCaption: action.data.tableCaption,\r\n                isLastPage: action.data.isLastPage,\r\n                lastPageNumber: action.data.lastPageNumber,\r\n                isLoading: false,\r\n            }\r\n        case 'GET_API_DATA_ERROR':\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n                isLoading: false\r\n            }\r\n        case 'SEARCH_QUERY_SUBMIT':\r\n            return {\r\n                ...state,\r\n                currentPage: 1,\r\n                search: action.search\r\n            }\r\n        case 'NEXT_PAGE':\r\n            return {\r\n                ...state,\r\n                currentPage: state.currentPage + 1\r\n            };\r\n\r\n        case 'PREVIOUS_PAGE':\r\n            return {\r\n                ...state,\r\n                currentPage: state.currentPage - 1\r\n            };\r\n            \r\n        default:\r\n            return state;\r\n    }\r\n  }\r\n\r\n export const initialState = {\r\n    shows: [],\r\n    isLoading: true,\r\n    currentPage: 1,\r\n    tableCaption: '',\r\n    isLastPage: false,\r\n    error: false,\r\n    search: null\r\n};\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    applyMiddleware(thunk, logger));\r\n\r\nexport default store;","// action functions\r\n\r\n// Trakt API info in variables\r\nconst traktApi = {\r\n    baseUrl:  'https://api.trakt.tv/',\r\n    headers: {\r\n        'Content-type': 'application/json',\r\n        'trakt-api-key': '38760291a0e06beeee9e5a43a2217cea8108ee0dc6d9a2fbcf784ac9aec2bdc3',\r\n        'trakt-api-version': 2\r\n    }\r\n}\r\n\r\n// multiple dispatch function with redux thunk calls before monting the app component\r\nfunction fetchData(state) {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: 'GET_API_DATA_START'\r\n        });\r\n\r\n        const shows = getShowsData(state);\r\n        shows.then(data => {\r\n            Promise.all(data.shows.map(show => {\r\n                return getImagesData(show);\r\n            })).then(result => {\r\n                    fetch(traktApi.baseUrl + 'countries/shows', {\r\n                        headers: traktApi.headers\r\n                    }).then(response => response.json())\r\n                    .then(countryList => {\r\n                        onSuccess({\r\n                            shows: result,\r\n                            countryList: countryList,\r\n                            tableCaption: state.search ? \"Search\" : \"Trending\",\r\n                            isLastPage: data.isLastPage,\r\n                            lastPageNumber: data.lastPageNumber\r\n                        });\r\n                    });\r\n                });\r\n        }).catch(error => onError(error));\r\n\r\n        function onSuccess(payload) {\r\n            return dispatch({\r\n                type: 'GET_API_DATA_READY',\r\n                data: {\r\n                    shows: payload.shows,\r\n                    countryList: payload.countryList,\r\n                    tableCaption: payload.tableCaption,\r\n                    isLastPage: payload.isLastPage,\r\n                    lastPageNumber: payload.lastPageNumber\r\n                }\r\n            });\r\n        }\r\n\r\n        function onError(error) {\r\n            return dispatch({\r\n                type: 'GET_API_DATA_ERROR',\r\n                error: error\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n// Used to get the shows data from trakt API\r\nfunction getShowsData(state) {\r\n    const { currentPage, search } = state;\r\n    let queryUrl = '';\r\n    let isLastPage = false;\r\n    let lastPageNumber;\r\n    if(!search) {\r\n        queryUrl = traktApi.baseUrl + 'shows/trending?page=' + currentPage\r\n    } else {\r\n        queryUrl = traktApi.baseUrl + 'search/show?page='\r\n                    + currentPage + '&years=' + search.years\r\n                    + '&fields=title&query=' + search.queryString\r\n                    + '&countries=' + search.country + '&limit=10';\r\n    }\r\n\r\n    return fetch(queryUrl, {\r\n        headers: traktApi.headers\r\n    }).then(response => {\r\n        if(response.status !== 200) {\r\n            console.log('Looks like there was a problem. Status Code: ' +\r\n                response.status);\r\n            return;\r\n        }\r\n        const pageCount = lastPageNumber = response.headers.get(\"X-Pagination-Page-Count\");\r\n        const thisPage = response.headers.get(\"X-Pagination-Page\");\r\n        isLastPage = (pageCount === thisPage);\r\n        return response.json();\r\n    }).then(data => {\r\n        return {\r\n            shows: data,\r\n            isLastPage: isLastPage,\r\n            lastPageNumber\r\n        }\r\n    })\r\n    .catch(error => {\r\n        return error;\r\n    });\r\n}\r\n\r\n// Used to fetch image links for posters\r\nfunction getImagesData(show) {\r\n    const params = '?api_key=bcdbbabd42939d9fe3b0800ec18a70cf&external_source=imdb_id';\r\n    const queryUrl = 'https://api.themoviedb.org/3/find/' + show.show.ids.imdb + params;\r\n    \r\n    return fetch(queryUrl)\r\n        .then(response => {\r\n            if(response.status !== 200) {\r\n                console.log('Looks like there was a problem. Status Code: ' +\r\n                    response.status);\r\n                return;\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(data => {\r\n            if(data.tv_results.length !== 0 && data.tv_results[0].poster_path) {\r\n                const link = 'https://image.tmdb.org/t/p/w200' + data.tv_results[0].poster_path;\r\n                return {\r\n                    title: show.show.title,\r\n                    poster: link,\r\n                    year: show.show.year,\r\n                    country: data.tv_results[0].origin_country\r\n                };\r\n            }\r\n            return {\r\n                title: show.show.title,\r\n                poster: \"\",\r\n                year: show.show.year,\r\n                country: \"\"\r\n            };\r\n        })\r\n        .catch(error  => {\r\n            console.log('Fetch Error : -S', error);\r\n        });\r\n}\r\n\r\nexport { fetchData };","import React from 'react';\r\n\r\nfunction Header() {\r\n    return <h1>Look up your favorite TV shows!</h1>;\r\n    \r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchData } from '../actions/index';\r\nimport store from '../store';\r\n\r\n\r\nclass UserInput extends Component {\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const query = {\r\n            queryString: this.refs.searchString.value,\r\n            years: this.refs.searchYear.value,\r\n            country: this.refs.searchCountry.value\r\n        }\r\n\r\n        this.props.dispatch({ type: 'SEARCH_QUERY_SUBMIT', search: query });\r\n        this.props.dispatch(fetchData(store.getState()));\r\n    }\r\n\r\n    render() {\r\n        if(this.props.isLoading || this.props.error) {\r\n            return null;\r\n        }\r\n\r\n        const countryList = this.props.countryList.map((country, key) => {\r\n            return <option key={key} value={country.code}>{country.name}</option>\r\n        });\r\n\r\n        return (\r\n            <div id=\"userInput\">\r\n                <form onSubmit={this.submitHandler}>\r\n                    <label htmlFor=\"searchString\">Title: </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        ref=\"searchString\"\r\n                        name=\"searchString\"\r\n                        placeholder=\"Search shows...\"\r\n                    />\r\n                    <label htmlFor=\"searchYear\">Year: </label>\r\n                    <input type=\"number\"\r\n                        min=\"1900\"\r\n                        max={new Date().getFullYear()}\r\n                        ref=\"searchYear\"\r\n                        name=\"searchYear\"\r\n                        // defaultValue={new Date().getFullYear()}\r\n                    />\r\n                    <label htmlFor=\"searchCountry\">Country: </label>\r\n                    <select ref=\"searchCountry\" name=\"searchCountry\">\r\n                        <option defaultValue></option>\r\n                        {countryList}\r\n                    </select>\r\n                    <button type=\"submit\">Search...</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        countryList: state.countryList,\r\n        isLoading: state.isLoading,\r\n        error: state.error\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(UserInput);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass Table extends Component {\r\n    render() {\r\n        if(this.props.isLoading) {\r\n            return (\r\n                <div id=\"loadingSVG\">\r\n                    <img src='91.svg' alt='...LOADING' />\r\n                    <h2>loading...</h2>\r\n                </div>\r\n            );\r\n        } else {\r\n            if(this.props.error) {\r\n                return  <div>\r\n                            <h1>SOMETHING BAD HAPPENED!</h1>\r\n                            {/* <h1>{this.props.error}</h1> */}\r\n                        </div>;\r\n            }\r\n\r\n            if(this.props.shows.length === 0) {\r\n                return <h1>NOTHING FOUND!</h1>\r\n            }\r\n\r\n            let rows = this.props.shows.map((show, i) => {\r\n                return <tr key={i}>\r\n                            <th width=\"5%\">{i + 1}</th>\r\n                            <td width=\"100px\">\r\n                                <img\r\n                                    src={show.poster}\r\n                                    alt={'\"' + show.title + '\" poster.'}\r\n                                    width='100px'\r\n                                />\r\n                            </td>\r\n                            <td>{show.title}</td>\r\n                            <td width=\"10%\">{show.year}</td>\r\n                            <td width=\"10%\">{show.country ? show.country.join(', ') : \"n/a\"}</td>\r\n                        </tr>\r\n            });\r\n\r\n            return (\r\n                <table>\r\n                    <caption>\r\n                        {this.props.tableCaption}\r\n                    </caption>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Number</th>\r\n                            <th>Poster</th>\r\n                            <th>Title</th>\r\n                            <th>Year</th>\r\n                            <th>Country</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {rows}\r\n                    </tbody>\r\n                </table>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        shows: state.shows,\r\n        isLoading: state.isLoading,\r\n        tableCaption: state.tableCaption,\r\n        error: state.error\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Table);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchData } from '../actions/index';\r\nimport store from '../store';\r\n\r\n\r\nclass Pagination extends Component {\r\n    nextPage = () => {\r\n        if(this.props.isLastPage) {\r\n            return;\r\n        }\r\n        this.props.dispatch({ type: 'NEXT_PAGE' });\r\n        this.props.dispatch(fetchData(store.getState()));\r\n    }\r\n\r\n    previousPage = () => {\r\n        if(this.props.currentPage === 1) {\r\n            return;\r\n        }\r\n        this.props.dispatch({ type: 'PREVIOUS_PAGE' });\r\n        this.props.dispatch(fetchData(store.getState()));\r\n    }\r\n\r\n    render() {\r\n        if(this.props.shows.length === 0 || this.props.isLoading) {\r\n            return null;\r\n        }\r\n        return (\r\n            <div id=\"pagination\">\r\n                <div id=\"prev\">\r\n                    <button onClick={this.previousPage}>PREV</button>\r\n                </div>\r\n                <div>\r\n                    <p>page {this.props.currentPage} of {this.props.lastPageNumber}</p>\r\n                </div>\r\n                <div id=\"next\">\r\n                    <button onClick={this.nextPage}>NEXT</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        shows: state.shows,\r\n        currentPage: state.currentPage,\r\n        isLastPage: state.isLastPage,\r\n        lastPageNumber: state.lastPageNumber,\r\n        isLoading: state.isLoading\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Pagination);","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport { fetchData } from './actions/index';\n\nimport './static/css/App.css';\n\nimport Header from './components/Header.jsx';\nimport UserInput from './components/UserInput.jsx';\nimport Table from './components/Table.jsx';\nimport Pagination from './components/Pagination.jsx';\n\n\nclass App extends Component {\n  componentWillMount() {\n    store.dispatch(fetchData(store.getState()));\n  }\n  \n\n  render() {\n    return (\n      <Provider store={store}>\n        <Header />\n        <UserInput />\n        <Table />\n        <Pagination />\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './static/css/App.css';\nimport App from './App.jsx';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// serviceWorker.unregister();\n"],"sourceRoot":""}